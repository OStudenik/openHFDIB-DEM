#!/usr/bin/python3
#ReadME: This script merges the spherical bodies  from the bodiesInfo/ directory into a single file in the VTKReconstruct/ directory.
#created by OStudenik 

import re
import numpy as np
import os

def canBeConvertedToFloat(input):
    try:
        float(input)
        return True
    except ValueError:
        return False

def getParticles_List(caseDir):
    "Returns a list with the particle numbers in the case directory."
    Directory = caseDir	   
    Strings   = list(set([numStr for numStr in os.listdir(Directory)]))
    Full_List = []
    for i in range(len(Strings)):
        if(Strings[i][-5:] == '.info'):
            h = Strings[i][:-5]
            Full_List.append(h[4:])
    if(len(Full_List) > 0):			
        Full_List.sort(key = float)
    return Full_List 

class VTK_file:
    def __init__(self,outputPath):
        "Class to write a VTK file with the data of the particles."
        self.outPutFile = outputPath
        self.nParticles = 0
        self.particles = []

    def writeFileHead(self):
        with open(self.outPutFile, 'w') as file:
            file.write("# vtk DataFile Version 4.2\n")
            file.write("Generated by HFDIBDEM-Python\n")
            file.write("ASCII\n")
            file.write("DATASET POLYDATA\n")
            
    def writeFilePoints(self):
        with open(self.outPutFile, 'a') as file:
            file.write("\nPOINTS "+str(self.nParticles)+" float\n")
            k = 0
            for particle in self.particles:
                file.write(str(particle.pos[0])+" "+str(particle.pos[1])+" "+str(particle.pos[2])+" ")
                k += 1
                if(k == 3):
                    file.write("\n")
                    k = 0
            if(k != 0):
                file.write("\n")
    
    def writeVertrices(self):
        with open(self.outPutFile, 'a') as file:
            file.write("\nVERTICES "+str(self.nParticles)+" "+str(self.nParticles*2)+"\n")
            for i in range(self.nParticles):
                file.write("1 "+str(i)+"\n")
    
    def writePointDataHead(self,nSets=5):
        with open(self.outPutFile, 'a') as file:
            file.write("\nPOINT_DATA "+str(self.nParticles)+"\n")
            file.write("FIELD FieldData "+str(nSets)+"\n")

    def writeIDData(self):
        with open(self.outPutFile, 'a') as file:
            file.write("id 1 "+str(self.nParticles)+" int\n")
            k = 0
            for i in range(self.nParticles):
                file.write(str(self.particles[i].iD)+" ")
                k += 1
                if(k == 9):
                    file.write("\n")
                    k = 0
            if(k != 0):
                file.write("\n")

    def writeStaticData(self):
        with open(self.outPutFile, 'a') as file:
            file.write("static 1 "+str(self.nParticles)+" int\n")
            k = 0
            for i in range(self.nParticles):
                file.write(str(int(self.particles[i].static))+" ")
                k += 1
                if(k == 9):
                    file.write("\n")
                    k = 0
            if(k != 0):
                file.write("\n")
    
    def writeRadiusData(self):
        with open(self.outPutFile, 'a') as file:
            file.write("r 1 "+str(self.nParticles)+" float\n")
            k = 0
            for i in range(self.nParticles):
                file.write(str(self.particles[i].r)+" ")
                k += 1
                if(k == 9):
                    file.write("\n")
                    k = 0
            if(k != 0):
                file.write("\n")

    def writeLinVelData(self):
        with open(self.outPutFile, 'a') as file:
            file.write("v 3 "+str(self.nParticles)+" float\n")
            k = 0
            for i in range(self.nParticles):
                file.write(str(self.particles[i].linVel[0])+" "+str(self.particles[i].linVel[1])+" "+str(self.particles[i].linVel[2])+" ")
                k += 1
                if(k == 3):
                    file.write("\n")
                    k = 0
            if(k != 0):
                file.write("\n")

    def writeOmegaData(self):
        with open(self.outPutFile, 'a') as file:
            file.write("omega 1 "+str(self.nParticles)+" float\n")
            k = 0
            for i in range(self.nParticles):
                file.write(str(self.particles[i].omega)+" ")
                k += 1
                if(k == 9):
                    file.write("\n")
                    k = 0
            if(k != 0):
                file.write("\n")
    
    def writeFile(self):
        "Writes the VTK file with the data of the particles."
        self.writeFileHead()
        self.writeFilePoints()
        self.writeVertrices()
        self.writePointDataHead(5)
        self.writeIDData()
        self.writeStaticData()
        self.writeRadiusData()
        self.writeLinVelData()
        self.writeOmegaData()

class sphereBody:
    def __init__(self):
        "Class to store the data of a sphere body."
        self.iD = 0
        self.name = "sphere"
        self.pos = np.zeros(3)
        self.linVel = np.zeros(3)
        self.omega = 0
        self.r = 0 
        self.static = False

    def printStats(self):
        "Prints the body's stats. -- debuging purposes."
        print("ID: ",self.iD)
        print("Name: ",self.name)
        print("Position: ",self.pos)
        print("Linear Velocity: ",self.linVel)
        print("Angular Velocity: ",self.omega)
        print("Radius: ",self.r)
        print("Static: ",self.static)

def readBodyInfo(path):
    "Reads the body info file and returns a sphereBody object with the data."
    idStrings = [
        "bodyId",
        "bodyName        ",
        "Vel",
        "omega",
        "static",
        "    position",
        "    radius",
    ]

    body = sphereBody()

    with open(path, 'r') as file:
        data = file.readlines()
    for line in data:
        for string in idStrings:
            fInd = line.find(string)
            if(fInd == 0 and string == "bodyId"):            
                iD = [float(strToVal) for strToVal in re.findall(r"-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?", line[len(string)::])]
                body.iD = int(iD[0])
            elif(fInd == 0 and string == "bodyName        "):
                body.name = str(line[len(string):-2])
            elif(fInd == 0 and string == "Vel"):
                vec = [float(strToVal) for strToVal in re.findall(r"-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?", line[len(string)::])]
                body.linVel = np.array(vec)
            elif(fInd == 0 and string == "omega"):
                omega = [float(strToVal) for strToVal in re.findall(r"-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?", line[len(string)::])]
                body.omega = omega[0]
            elif(fInd == 0 and string == "static"):
                static = [float(strToVal) for strToVal in re.findall(r"-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?", line[len(string)::])]
                body.static = bool(static[0])
            elif(fInd == 0 and string == "    position"):
                vec = [float(strToVal) for strToVal in re.findall(r"-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?", line[len(string)::])]
                body.pos = np.array(vec)
            elif(fInd == 0 and string == "    radius"):
                r = [float(strToVal) for strToVal in re.findall(r"-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?", line[len(string)::])]
                body.r = r[0]

            if(fInd == 0): idStrings.pop(idStrings.index(string))    
    return body

def checkIfSphereBodyInfo(path):
    with open(path, 'r') as file:
        data = file.readlines()
    for line in data:
        if(line.find("sphere") == 0):
            return True
    return False

def main():
    # EditThese
    nPresent = 0
    # EditThese
    timeLevelList = os.listdir('bodiesInfo/')
    for item in timeLevelList:
        if canBeConvertedToFloat(item):
            if(float(item) == int(float(item))):
                timeLevelList[timeLevelList.index(item)] = int(float(item))
            else:
                timeLevelList[timeLevelList.index(item)] = float(item)
    timeLevelList.sort(key = float)                

    if(not os.path.isdir('VTKReconstruct/')):
        os.system('mkdir VTKReconstruct/')
        simulationLength = len(os.listdir('bodiesInfo/'))
    else:
        simulationLength = len(os.listdir('bodiesInfo/'))
        nPresent = len(os.listdir('VTKReconstruct/'))
        print(" -- Warning: VTKReconstruct/ already exists. The program will append the data to the existing files size: ",nPresent)    
    print(" -- Time level outputs to process: ",timeLevelList[nPresent:])
    print(" -- Simulation length: ",simulationLength)

    for t in timeLevelList[nPresent:]:
        i = timeLevelList.index(t)
        path = "bodiesInfo/"+str(t)+"/"
        print("-- Reading: ",path)
        prtNumList= getParticles_List(path)
        fileName = "VTKReconstruct/ParticleData."+str(i).zfill(4)+".vtk"

        vtkFile = VTK_file(fileName)
        vtkFile.nParticles = len(prtNumList)
        for particle in prtNumList:
            if(checkIfSphereBodyInfo(path+"body"+str(particle)+".info")):
                body = readBodyInfo(path+"body"+str(particle)+".info")
                vtkFile.particles.append(body)
            else:
                vtkFile.nParticles -= 1
        vtkFile.writeFile()
                
if __name__ == "__main__":
    main()